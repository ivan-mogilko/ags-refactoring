//=============================================================================
// STAGE TWO: Modules: Common.Lib and Compiler.Lib
//=============================================================================

Once the source files are distributed between the libraries it is time for
module splitting. Ideally there should be one module (*.h/*.cpp pair) per
logical union of functions, class and logical union of structs or other declarations.
There's also a need to make sure Common lib modules do not have anything strictly
specific to either runtime or editor left in them.

At the moment there are several *.h and *.cpp files that contain abnormal amount
of code, in the first instance - acroom.h and ac.cpp.

While ac.cpp is strictly engine source file, acroom.h is not only shared, but
contains a lot of preprocessor-switch controlled code with function implementations.

//-----------------------------------------------------------------------------
// step 1 -- acroom.h
//-----------------------------------------------------------------------------

Task: split up acroom.h in following substeps:
1. Separate the code under CROOM_NOFUNCTIONS macro control.
2. Separate the code under NO_SAVE_FUNCTIONS macro control.
3. Separate the definition and implementation (if any) from "non-functions"
acroom part into *.cpp.
4. Separate the definition and implementation from "functions" acroom part
into *.cpp. Split any Engine/AGS.Native specific code left.

Result:
    acroom.h            - a common header file, should not be included directly;
    acroom_nofunc.h     - header file for modules that do not need acroom functions;
    acroom_func.h       - header file for modules that do need acroom functions;
    acroom_savefunc.h   - header file for modules that need save functions;
    
    acroom.cpp          - contains function implementations from acroom (except save functions);
    acroom_save.cpp     - contains save functions from acroom;
    
Linkage:
    Common.Lib:         acroom.cpp
    Engine.App:         acroom.cpp (via Common.Lib)
    AGS.Native:         acroom.cpp (via Common.Lib); acroom_save.cpp


//-----------------------------------------------------------------------------
// step 2 -- wgt2allg.h
//-----------------------------------------------------------------------------

Task: split up wgt2allg.h similar to acroom.h (should be easier though):
1. Separate the code under WGT2ALLEGRO_NOFUNCTIONS macro control.
2. Move the implementation to wgt2allg.cpp.

Result:
    wgt2allg.h          - a first part of common header, should not be included directly;
    wgt2allg_2.h        - a second part of common header, should not be included directly;
    wgt2allg_nofunc.h   - header file for modules that do not need wgt2allg functions;
    wgt2allg_func.h     - header file for modules that need wgt2allg functions;
    
    wgt2allg.cpp        - contains function implementations from wgt2allg;
    
Linkage:

    Common.Lib:         wgt2allg.cpp
    Engine.App:         wgt2allg.cpp (via Common.Lib)
    AGS.Native:         wgt2allg.cpp (via Common.Lib)
    

//-----------------------------------------------------------------------------
// step 3 -- splitting compiler/interpreter header and source file
//-----------------------------------------------------------------------------

Task:
1. Split up headers and source files of compiler/interpreter into logical units;
2. Separate the units between Common, Compiler and Runtime projects.

Some symbols may become exposed to public as a result, but this is a temporary
measure and will be fixed later.

During splitting compiler/parser stuff a lot of declarations and definitions were
moved to Common lib in order to gather a logically bound set of types and functions.
I presume that afterwards a reverse process will take place which will result
in all compiler- and runtime-specific code be moved to Compiler lib and Engine app
respectively; at least that is something one should aim.
UPDATE: /2012-06-12/ that's what really happened now.

//-----------------------------------------------------------------------------
// step 4 -- splitting acroom header and source files
//-----------------------------------------------------------------------------
/2012-06-12/

Task:
1. Split up existing acroom*.h headers and acroom.cpp source file into logical units;
2. Move any runtime-specific code found to Engine.App.

//-----------------------------------------------------------------------------
// What is left in Common.Lib
//-----------------------------------------------------------------------------
/2012-06-14/

So, what's left here for the Stage Two, before we move to Engine part?
1. acroom.h is now just a list of headers to include; question is, are those headers
really need to be included altogether? Probably it's the time to get rid of acroom,
acroom_func and acroom_nofunc headers.
2. bigend, clib32, compress, lzw, misc and sprcache modules seem to be self-sufficient
allright, no changes needed at the moment.
3. wgt2allg* headers need to be rejoined, since their separation was temporary and
served rather a possibility to make smaller changes and better understand the code;
all the implementation is in wgt2allg.cpp now anyway.
4. acfonts and acgui modules on other hand contain a lot of different classes and
should be split.

//-----------------------------------------------------------------------------
// step 5 -- final hours of acroom.h
//-----------------------------------------------------------------------------
/2012-06-14/

Done.

//-----------------------------------------------------------------------------
// step 6 -- wgt2allg reunion
//-----------------------------------------------------------------------------
/2012-06-14/

Done. Although it looks tad messy right now.

//-----------------------------------------------------------------------------
// step 7 -- acfonts and acgui
//-----------------------------------------------------------------------------
/2012-06-14/

acfonts.cpp is shared, but it references something from acruntim.h, which is not
good. Basically, it should be understood why it needs acruntim and separate
those parts of it which belong only to engine.
NOTE: acruntim will be split later (probably with engine code).

//-----------------------------------------------------------------------------
// step 8 -- acgui
//-----------------------------------------------------------------------------
/2012-06-14/

Practically same as acfonts.

It appears, both acfont and acgui functionality is shared almost fully. I just
had to make sure acruntim.h is not referenced anywhere.


//=============================================================================
// Quick notes for future reference
//=============================================================================

WGT2ALLEGRO_NOFUNCTIONS - usage similar to CROOM_NOFUNCTIONS

ALLEGRO_BIG_ENDIAN - must test compilation of libs with this macro defined
(note: "bigend.h" must be included in module if there's this macro in the code)
//------------------------------------
It appears ALLEGRO_BIG_ENDIAN code is not much used at the moment, and does not
even compile (latter may be fixed easily by few tweaks). However, there are several
methods in ac* classes for reading and writing objects under big endian platforms.
This may be a good idea to move little endian code to these methods too, thus
further enhancing code structure.
This will not be "refactoring" in a common sense and will require more accurate
testing, so I'll leave this for the future.
//------------------------------------

Question: why does the runtime script interpreter (csrun.cpp) needed to be shared?
What use does it have for AGS.Native?

Engine sends messages to debugger either via files or named pipes;
IAGSEditorDebugger interface is used to make a call.

I am not sure it is a good idea to call quit() function from the middle of random
process, like it is done now; perhaps this behavior could be substituted by
tested return values?

What is ROOMEDIT macro?

IAGSFontRenderer is declared in both acruntim.h and agsplugin.h; declarations are
*IDENTICAL* o_0