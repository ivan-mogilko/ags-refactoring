//=============================================================================
// STAGE FOUR: Getting pieces together
//=============================================================================

When splitting ac.cpp I made some rush decisions. It was a messy code in the
single unit, now it is a messy code split to dozens of units with compilation
time boosted up.

AGS code has numerous cross-ties between units with uncommon functions
referencing same global variables and other functions. Originally this was
handled by delaring a whole lot of symbols in headers (namely - acruntim.h).

Time for cleaning up, code structure optimization and beautification.

Primary objectives are:
1. Recompose the code to enhance logical division between sets of functions.
2. Reduce number of headers included to source files.
3. There should be a special header containing declarations of all the
functions that are registered as script symbols.
4. Cleanup solution, re-group files in folders.
5. Make sure everything can be built and run on other supported platforms.


//=============================================================================
// Ideas from Sonneveld's code
//=============================================================================

    - script functions should be registered right in the unit; that's a good one;
    this not only allows each unit control what it exports to script, but also
    reduces ties between modules.
    He uses this comment to mark exported functions:
    /* *** SCRIPT SYMBOL: [MODULE] SCRIPT_CLASS::SCRIPT_FUNCTION *** */
    e.g.
    /* *** SCRIPT SYMBOL: [Hotspot] Hotspot::get_Name *** */
    /* *** SCRIPT SYMBOL: [Game] MoveCharacterToHotspot *** */
    
//=============================================================================
// Thoughts on Solution
//=============================================================================

    Common
    Editor
    Engine
    <Platform-specific>
    Solutions
    
    --------------------------
    Solutions:
        Editor.Full
            +Common.lib
            +Compiler.lib
        Editor.NoNative
        Engine
            Common.lib
            AGSEngine.exe (acwin.exe)
    --------------------------
    
    Common:
        ac      - general stuff (sprcache goes here for instance)
        font    - font utils
        gui     - gui utils
        script  - compiler/parser/interpreter shared stuff
        utils   - low-level, specific utils
        
    Compiler:
        script  - compiler and parser units
        utils   - fmem unit
        
    Engine:
        ac      - general stuff
            dynobj  - dynamic and script object types
        audio
        debug   - related to debugging, logging and connection with editor/exterior debugger
        gfx     - utility graphics like filters
        gui
        main    - engine entry point (main function and similar)
        script  - related to script running and exporting symbols
     
     
//=============================================================================
// Quick notes
//=============================================================================

game_file basically loads GameSetupStruct + few more objects;
make ReadFromFile in GameSetupStruct and move code there

