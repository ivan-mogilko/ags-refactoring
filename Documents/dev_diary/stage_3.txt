//=============================================================================
// STAGE THREE: Modules: Engine.App
//=============================================================================

Engine contains quite a large heap separated between few modules, in the first
place - infamous ac.cpp with ~30k lines of code. More code referenced from
ac.cpp can be found in other source files. It's interesting that in many cases
the functions from different modules are declared not in headers but directly
in *.cpp as externs.

Splitting perhaps should start from smaller modules to get used to engine code
before diving into ac.cpp.

//-----------------------------------------------------------------------------
// step 1 -- start with smaller ones
//-----------------------------------------------------------------------------

    acgfx.h, .cpp
    acsound.h, .cpp
    acaudio.cpp (audiochannel, soundclip)
    acchars (character, helpers)
    acdebug
    acdialog
    
    
//-----------------------------------------------------------------------------
// step 2 -- onward to the depths
//-----------------------------------------------------------------------------

    ac.cpp, acruntim.h
    

//=============================================================================
// Quick notes for future reference
//=============================================================================

Surely, something has to be done with wgt2allg header in the future. It appears
that it is highly sensitive to the header including order which does not always
make sense; this issue must be investigated.
It will also be good to know if there's a way to not include all of the allegro
headers if you just need couple of symbols for audio or gfx.

With AGS code being split on many units compilation seem to become longer. While
this does not seem a big issue, it would be nice to see if forward-declarations
and more wise header composition will help to solve this.
On other hand, if we are to design a brand new class system, the situation may
change to something totally different. Currently many similar issues are rising
because module splitting was made raw.

There's a separate structure for storing dynamic room status. How much it needs
to be separate?