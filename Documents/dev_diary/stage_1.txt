//=============================================================================
// STAGE ONE: Libraries
//=============================================================================

Idea is to separate the code in Common, Engine and AGS.Native into number of
static libraries with strict dependancy between each other. This should lead
to:

a) encapsulation;
b) reusability of common parts;
c) better understanding of program structure and ties between modules;
d) higher discipline when adding fixes and new features.

//-----------------------------------------------------------------------------
// step 1
//-----------------------------------------------------------------------------

Initially proposed list of libs and their meaning:

1. Common.Shared.Lib:   a code from Common folder shared between Engine and AGS.Native;
2. Engine.Shared.Lib:   a code from Engine folder shared between Engine and AGS.Native;
3. Engine.Specific.Lib: a code from Common and Engine folders strictly specific to Engine runtime;
4. Native.Specific.Lib: a code from Common and Engine folders strictly specific to AGS.Native library;
5. Compiler.Lib:        script compiler functionality (currently only used by AGS.Native).

Library names may change in future. For start they are defined so to better
reflect not only their functionality, but also the origins of their source.
Their contents may also change (be split or joined) after it is ensured that
they can be successfuly built and used as intended without problems.

//-----------------------------------------------------------------------------
// step 2
//-----------------------------------------------------------------------------

1. Postpone Engine.Specific.Lib and Native.Specific.Lib since they don't seem to
be really needed, at least at the moment. Besides, it would take a while to
split application-dependent and application-independent engine code from ac.cpp.

2. Merge Common.Shared.Lib and Engine.Shared.Lib in Common.Lib.


//=============================================================================
// ISSUE: Partially shared source code
//=============================================================================

There is a number of source and header files both in Common and Engine folder
that contain sections of code specific to either Engine runtime or AGS.Native.
Their selection is controlled by THIS_IS_THE_ENGINE macro.

In the original projects these files were directly included to both the Engine
and the AGS.Native lib. Since, however, we are to make static libraries shared
by both runtimes, this approach can no longer be valid.

Suggestion is to split out the project-dependent implementation into separate
source files, while keeping declarations in the shared modules.

Clearly, this will break encapsulation rule, but may be fixed later when more
serious changes to module structure and user types will take place.

For example, consider following code from 'sprcache.cpp':

//---------------------------------------------------------
int SpriteCache::initFile(const char *filnam)
{
    <...>
    
    #ifdef THIS_IS_THE_ENGINE
      // make it a blue cup, to avoid crashes
      spritewidth[vv] = spritewidth[0];
      spriteheight[vv] = spriteheight[0];
      offsets[vv] = offsets[0];
      flags[vv] = SPRCACHEFLAG_DOESNOTEXIST;
    #else
      // no sprite ... blank it out
      spritewidth[vv] = 0;
      spriteheight[vv] = 0;
      offsets[vv] = 0;
    #endif
    
    <...>
}
//---------------------------------------------------------

Here we have parts of code which may be enabled or disabled depending on
what project it is compiled in.
How we can deal with this?

1. Declare a new function in SpriteCache class:
//---------------------------------------------------------
    void initFile_initSpriteParams(int vv);
//---------------------------------------------------------
    
2. Use that function in the aforementioned problem place:
//---------------------------------------------------------
int SpriteCache::initFile(const char *filnam)
{
    <...>
    
    initFile_initSpriteParams(vv);
    
    <...>
}
//---------------------------------------------------------

3. Implement different versions of this function in two separate source files:

'sprcache_engine.cpp' (an engine-specific file in the Engine.Specific.Lib):
//---------------------------------------------------------
void SpriteCache::initFile_initSpriteParams(int vv)
{
    // make it a blue cup, to avoid crashes
    spritewidth[vv] = spritewidth[0];
    spriteheight[vv] = spriteheight[0];
    offsets[vv] = offsets[0];
    flags[vv] = SPRCACHEFLAG_DOESNOTEXIST;
}
//---------------------------------------------------------
'sprcache_agsnative.cpp' (an AGS.Native-specific file in the Native.Specific.Lib):
//---------------------------------------------------------
void SpriteCache::initFile_initSpriteParams(int vv)
{
    // no sprite ... blank it out
    spritewidth[vv] = 0;
    spriteheight[vv] = 0;
    offsets[vv] = 0;
}
//---------------------------------------------------------

Hence, we will have a
    shared implementation,
    engine-specific implementation and
    ags.native-specific implementation
all nicely separated.

In the end, we should achieve such code composition that won't need usage of macros
to control compilation of project-specific code.

//-----------------------------------------------------------------------------
// A NOTE on acroom.h
//
// acroom.h has one section with THIS_IS_THE_ENGINE, but this is a header,
// which is included to both runtime at ac.cpp, and editor at agsnative.cpp;
// plus the mentioned code is disabled when included in any other modules.
// These facts make me think there should be some other way to deal with it
// on later stages of refactoring.
//-----------------------------------------------------------------------------

//=============================================================================
